# -*- coding: utf-8 -*-
"""Food Delivery Time Prediction and Analysis Project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jarTQ61OH87z6tLP-SZkhyA3eTSLwLmI

# **Food Delivery Time Prediction and Analysis**
"""

# importing necessary modules
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

df=pd.read_csv('/content/Food_Delivery_Times (1).csv')
df.head()

df.shape

df.info()

df.describe()

df.isna().sum()

df['Weather'] = df['Weather'].fillna(df['Weather'].mode()[0])
df['Traffic_Level'] = df['Traffic_Level'].fillna(df['Traffic_Level'].mode()[0])
df['Time_of_Day'] = df['Time_of_Day'].fillna(df['Time_of_Day'].mode()[0])

x= df['Courier_Experience_yrs'].mean()
df['Courier_Experience_yrs'].fillna(x,inplace=True)

df.isnull().sum()

df.duplicated().sum()

"""# **EDA**
#**1- (univarient)**
"""

df['Weather'].value_counts().plot(kind = "bar", color='lightblue')

"""## **Most of the weather is( Clear).**"""

df['Traffic_Level'].value_counts().plot(kind = "bar" ,color=['red', 'gray', 'green'])

"""**Data is distributed between low and medium congestion, with low congestion being the most common.**"""

df['Time_of_Day'].value_counts().plot(kind = 'bar', color=['gold'])

"""#### **The requests are distributed almost evenly over the different periods.**"""

sns.boxplot(df['Distance_km'] ,palette='coolwarm')

"""**The distribution shows most of the requests within a range of 5-15 km.**"""

sns.boxplot(df['Preparation_Time_min'], color= 'purple')

"""**Preparation time varies greatly, with many concentrating in under 20 minutes.**"""

sns.boxplot(df['Courier_Experience_yrs'] ,palette=['#FF5733', '#33FF57', '#3357FF']);

"""**Most drivers have less than 5 years experience.**"""

# List of categorical columns for pie charts
categorical_columns = ['Weather', 'Traffic_Level', 'Time_of_Day', 'Vehicle_Type']

# Create pie charts for each categorical column
fig, axes = plt.subplots(2, 2, figsize=(14, 10))
axes = axes.flatten()

for i, column in enumerate(categorical_columns):
    values = df[column].value_counts()
    axes[i].pie(values, labels=values.index, autopct='%1.1f%%', startangle=90, colors=plt.cm.Paired.colors)
    axes[i].set_title(f'{column} Distribution', fontsize=14)

plt.tight_layout()
plt.show()

"""#**2- Bivarient**"""

sns.boxplot(x='Weather', y='Delivery_Time_min', data=df , palette='Set2')
plt.title("Impact of Weather on Delivery Time")
plt.show()

sns.boxplot(x='Traffic_Level', y='Delivery_Time_min', data=df, color='cyan')
plt.title("Impact of Traffic Level on Delivery Time")
plt.show()

sns.boxplot(x='Vehicle_Type', y='Delivery_Time_min', data=df , palette='deep')
plt.title("Impact of Vehicle Type on Delivery Time")
plt.show()

sns.barplot(x = df['Vehicle_Type'],y=df['Distance_km'] ,data=df , hue = 'Vehicle_Type',palette='coolwarm');

bar = sns.distplot(df["Distance_km"],color='Red',kde=True,bins=25)
bar.legend(["Skewness: {:.2f}".format(df['Distance_km'].skew())])
plt.title(" Distance_km Distribution");

"""#**Machin Learning**"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# قراءة البيانات

# التأكد من نظافة البيانات (إزالة القيم الناقصة)
df = df.dropna()

df['Weather'] = df['Weather'].astype('category').cat.codes
df['Traffic_Level'] = df['Traffic_Level'].astype('category').cat.codes
df['Vehicle_Type'] = df['Vehicle_Type'].astype('category').cat.codes

X = df[['Weather', 'Traffic_Level', 'Vehicle_Type', 'Distance_km']]  # المتغيرات المستقلة
y = df['Delivery_Time_min']  # المتغير المستهدف

# تقسيم البيانات إلى مجموعة تدريب واختبار
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# إنشاء نموذج الانحدار الخطي
model = LinearRegression()

# تدريب النموذج
model.fit(X_train, y_train)

# توقع القيم لمجموعة الاختبار
y_pred = model.predict(X_test)

# تقييم الأداء
mse = mean_squared_error(y_test, y_pred)  # متوسط مربع الخطأ
r2 = r2_score(y_test, y_pred)  # معامل التحديد

# عرض النتائج
print("Mean Squared Error (MSE):", mse)
print("R-squared (R2):", r2)

# عرض المعاملات (Coefficients)
coefficients = pd.DataFrame({'Feature': X.columns, 'Coefficient': model.coef_})
print(coefficients)